print(equivSummary(equivsList, decs=5))
data(prostateIds)
expandedWelsh <- expandedProfile(welsh01EntrezIDs[1:100], onto="ANY",
level=2, orgPackage="org.Hs.eg.db")
expandedSingh <- expandedProfile(singh01EntrezIDs[1:100], onto="ANY",
level=2, orgPackage="org.Hs.eg.db")
commonGenes <- intersect(welsh01EntrezIDs[1:100], singh01EntrezIDs[1:100])
commonExpanded <- expandedProfile(commonGenes, onto="ANY", level=2,
orgPackage="org.Hs.eg.db")
### FUnciona si fem:
equivMF <-equivalentGOProfiles (expandedWelsh[["MF"]],
qm  = expandedSingh[["MF"]],
pqn0= commonExpanded[["MF"]])
class(equivMF)
equivMF
class(equivMF[[1]])
install.packages("faraway")
require(faraway)
plot(prostate$lcavol, prostate$lpsa)
abline(lm(prostate$lcavol~prostate$lpsa))
plot(prostate$lpsa~prostate$lcavol)
abline(lm(prostate$lpsa~prostate$lcavol))
abline(lm(prostate$lcavol~prostate$lpsa))
lm(prostate$lpsa~prostate$lcavol)
lm(prostate$lcavol~prostate$lpsa)
abline(v=0)
par(mfrow=c(2,1))
plot(prostate$lpsa~prostate$lcavol)
plot(prostate$lcavol~prostate$lpsa)
abline(lm(prostate$lpsa~prostate$lcavol))
abline(lm(prostate$lcavol~prostate$lpsa))
par(mfrow=c(2,1))
plot(prostate$lpsa~prostate$lcavol)
abline(lm(prostate$lpsa~prostate$lcavol))
abline(lm(prostate$lcavol~prostate$lpsa))
plot(prostate$lcavol~prostate$lpsa)
abline(lm(prostate$lpsa~prostate$lcavol))
abline(lm(prostate$lcavol~prostate$lpsa))
plot(prostate$lpsa~prostate$lcavol)
abline(lm(prostate$lpsa~prostate$lcavol))
abline(lm(prostate$lcavol~prostate$lpsa))
lm(prostate$lpsa~prostate$lcavol)
lm(prostate$lcavol~prostate$lpsa)
summary(prostate)
plot(prostate$lcavol~prostate$lpsa)
abline(lm(prostate$lpsa~prostate$lcavol))
abline(lm(prostate$lcavol~prostate$lpsa))
lm(prostate$lpsa~prostate$lcavol)
lm(prostate$lcavol~prostate$lpsa)
par(mfrow=c(1,1))
plot(prostate$lpsa~prostate$lcavol)
lm(prostate$lpsa~prostate$lcavol)
recta1<- lm(prostate$lpsa~prostate$lcavol)
abline(recta1)
recta2<- lm(prostate$lcavol~prostate$lpsa)
recta2
recta2$coefficients
recta2$coefficients[1]
b2 <- recta2$coefficients[2]
b1 <- -a2/b2
abline(prostate$lcavol * b1 + a1)
b1 <- -a2/b2
abline(prostate$lcavol * b1 + a1)
a2 <- recta2$coefficients[1]
b2 <- recta2$coefficients[2]
a1 <- 1/b2
b1 <- -a2/b2
abline(prostate$lcavol * b1 + a1)
abline(prostate$lcavol, prostate$lcavol * b1 + a1)
a1
b1
recta1
1/0.7193
b1
plot(prostate$lpsa~prostate$lcavol)
recta1<- lm(prostate$lpsa~prostate$lcavol)
recta1
abline(recta1)
recta2<- lm(prostate$lcavol~prostate$lpsa)
recta2
recta2
a2 <- recta2$coefficients[1]
b2 <- recta2$coefficients[2]
a2
b2
a1 <- -a2/b2
b1 <- 1/b2
abline(prostate$lcavol, prostate$lcavol * b1 + a1)
a1
b1 <- 1/b2
b1
x<- seq(from = min(prostate$lcavol),
to = max(prostate$lcavol),
length.out = 100)
x
abline(x, x * b1 + a1)
a1 <- -a2/b2
b1 <- 1/b2
x<- seq(from = min(prostate$lcavol),
to = max(prostate$lcavol),
length.out = 100)
abline(x, x * b1 + a1)
plot(prostate$lpsa~prostate$lcavol)
recta1<- lm(prostate$lpsa~prostate$lcavol)
recta1
abline(recta1)
recta2<- lm(prostate$lcavol~prostate$lpsa)
recta2
a2 <- recta2$coefficients[1]
a2
b2
a1 <- -a2/b2
a1
b1 <- 1/b2
b1
abline(x * b1 + a1, x)
abline(x * b1 + a1~ x)
x<- seq(from = min(prostate$lcavol),
to = max(prostate$lcavol),
length.out = 100)
abline(x * b1 + a1~ x)
b1
a1
x * b1 + a1~ x
abline(x * b1 + a1~ x)
abline(x~ x * b1 + a1)
abline(x * b1 + a1 ~ x)
plot(prostate$lpsa~prostate$lcavol)
recta1<- lm(prostate$lpsa~prostate$lcavol)
recta1
abline(recta1)
recta2<- lm(prostate$lcavol~prostate$lpsa)
recta2
a2 <- recta2$coefficients[1]
b2 <- recta2$coefficients[2]
a1 <- -a2/b2
b1 <- 1/b2
x<- seq(from = min(prostate$lcavol),
to = max(prostate$lcavol),
length.out = 100)
abline(x * b1 + a1 ~ x)
abline(x * b1 + a1 ~ x)
abline((x * b1 + a1) ~ x)
abline(y ~ x)
head(data.frame(x,y))
y <- x * b1 + a1
y <- x * b1 + a1
a1 <- -a2/b2
b1 <- 1/b2
x<- seq(from = min(prostate$lcavol),
to = max(prostate$lcavol),
length.out = 100)
y <- x * b1 + a1
head(data.frame(x,y))
tail(data.frame(x,y))
abline(y ~ x)
abline(lm(prostate$lpsa~prostate$lcavol))
abline(lm(prostate$lcavol~prostate$lpsa))
abline(a1, b1)
abline(v=0)
plot(prostate$lpsa~prostate$lcavol)
recta1<- lm(prostate$lpsa~prostate$lcavol)
recta1
abline(recta1)
recta2<- lm(prostate$lcavol~prostate$lpsa)
recta2
a2 <- recta2$coefficients[1]
b2 <- recta2$coefficients[2]
a1 <- -a2/b2
b1 <- 1/b2
abline(a1, b1)
abline(v=0)
plot(prostate$lpsa~prostate$lcavol)
abline(prostate$lpsa~prostate$lcavol)
abline(prostate$lcavol~prostate$lpsa)
abline(prostate$lpsa~prostate$lcavol)
abline(lm(prostate$lpsa~prostate$lcavol))
abline(lm(prostate$lcavol~prostate$lpsa))
abline(recta1<-lm(prostate$lpsa~prostate$lcavol))
abline(recta2<-lm(prostate$lcavol~prostate$lpsa))
recta1
recta2
plot(prostate$lpsa~prostate$lcavol)
abline(v=0)
recta1<- lm(prostate$lpsa~prostate$lcavol)
recta1
abline(recta1)
recta2<- lm(prostate$lcavol~prostate$lpsa)
recta2
a2 <- recta2$coefficients[1]
b2 <- recta2$coefficients[2]
a1 <- -a2/b2
b1 <- 1/b2
abline(a1, b1)
abline(h=mean(prostate$lpsa))
abline(h=mean(prostate$lcavol))
abline(v=mean(prostate$lcavol))
if(!(require(printr))) {
install.packages(
'printr',
type = 'source',
repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
)
}
require(printr)
\item
update.packages("rmarkdown")
source("https://bioconductor.org/biocLite.R")
biocLIte("gage")
biocLite("gage")
? gage
require(gage)
? gage
biocLite("gagedata")
biocLite("gageData")
? gageData
library(gageData)
? gageData
data("gage")
data("gageData")
data()
? gageData
? hnrnp.cnts
installifnot <- function(pckgName){
if (!(require(pckgName, character.only = TRUE))) {
install.packages(pckgName)
}else{
print(paste("Package", pckgName, "already installed", sep = " "))
}
}
installBiocifnot <- function(pckgName){
if (!(require(pckgName, character.only = TRUE))) {
source("https://bioconductor.org/biocLite.R")
biocLite(eval(pckgName), suppressUpdates = TRUE)
}else{
print(paste("Package", pckgName, "already installed", sep = " "))
}
}
installifnot("GSA")
installifnot("xtable")
installifnot("xlsx")
installifnot("rafalib")
installBiocifnot("genefilter")
installBiocifnot("Biobase")
installBiocifnot("pd.hugene.2.1.st")
installBiocifnot("hugene20sttranscriptcluster.db")
installBiocifnot("limma")
source("Rcode/quickAnalysis.R")
installifnot("multtest")
installifnot("beeswarm")
installifnot <- function(pckgName){
if (!(require(pckgName, character.only = TRUE))) {
install.packages(pckgName)
}else{
print(paste("Package", pckgName, "already installed", sep = " "))
}
}
installBiocifnot <- function(pckgName){
if (!(require(pckgName, character.only = TRUE))) {
source("https://bioconductor.org/biocLite.R")
biocLite(eval(pckgName), suppressUpdates = TRUE)
}else{
print(paste("Package", pckgName, "already installed", sep = " "))
}
}
installifnot("GSA")
installifnot("xtable")
installifnot("xlsx")
installifnot("rafalib")
installBiocifnot("genefilter")
installBiocifnot("Biobase")
installBiocifnot("pd.hugene.2.1.st")
installBiocifnot("hugene20sttranscriptcluster.db")
installBiocifnot("limma")
source("Rcode/quickAnalysis.R")
installifnot("multtest")
installifnot("rjava")
installifnot("rJava")
install.packages("kernlab", dep=TRUE)
setwd("/media/alex/2644735E44733023/Dropbox (VHIR)/Charlas y presentaciones/2016-09-09-BIB-BootCamp")
installifnot <- function (packageName){
if (!(require(packageName, character.only=TRUE))) {
install.packages(packageName)
}else{
detach(paste ("package", packageName, sep=":"), character.only=TRUE)
}
}
bioCifnot <- function (packageName){
if (!(require(packageName, character.only=TRUE))) {
source("http://bioconductor.org/biocLite.R")
biocLite(packageName)
}else{
detach(paste ("package", packageName, sep=":"), character.only=TRUE)
}
}
installifnot("knitr")
installifnot("XML") # May yield problems if some libraries (xml2-config) not available in linux
bioCifnot ("org.Hs.eg.db")
bioCifnot ("hgu133a.db")
bioCifnot ("GO.db")
bioCifnot ("GOstats")
bioCifnot ("topGO")
bioCifnot ("GSA")
bioCifnot ("annotate")
bioCifnot ("Rgraphviz")
inputDir="datasets"
topTabAvsB <- read.table (file.path(inputDir, "Top_AvsB.csv2"), head=T, sep=";", dec=",", row.names=1)
expresAvsB <- read.table (file.path(inputDir, "expres_AvsB.csv2"), head=T, sep=";", dec=",", row.names=1)
dim(topTabAvsB); head(topTabAvsB)
dim(expresAvsB); head(expresAvsB)
myProbes <- rownames(expresAvsB)
head(myProbes)
require(hgu133a.db)
require(hgu133a.db)
keytypes(hgu133a.db)
geneAnots <- select(hgu133a.db, myProbes, c("SYMBOL", "ENTREZID", "GENENAME")
geneAnots <- select(hgu133a.db, myProbes, c("SYMBOL", "ENTREZID", "GENENAME")
geneAnots <- select(hgu133a.db, myProbes, c("SYMBOL", "ENTREZID", "GENENAME"))
head(geneAnots)
select(org.Hs.eg.db, entrezs, GO)
entrezs
entrezs <- unlist(mget (probes, hgu133aENTREZID))
select(org.Hs.eg.db, entrezs, GO)
probes <- rownames(expresAvsB)[1:5]
probes <- rownames(expresAvsB)[1:5]
require(annotate)
entrezs <- unlist(mget (probes, hgu133aENTREZID))
simbols <- unlist(mget (probes, hgu133aSYMBOL))
GOAcc<-mget(probes,env=hgu133aGO)
GOAcc[[1]][1:5]
x<-0
for (i in 1:length(GOAcc)){x<-x+length(GOAcc[[i]])}
numGOterms <- x
res<- matrix(data = NA, nrow = numGOterms, ncol = 6)
actualrow<-1
for (i in 1:length(GOAcc)){
if (GOAcc[i]=="NA"){
reg<-c(names(GOAcc[i]), entrezs[i], simbols[i], rep("NA",3))
res[actualrow,]<-unlist(reg)
actualrow<-actualrow+1}
else{
for (j in 1:length(GOAcc[[i]])){
reg<-c(names(GOAcc[i]), entrezs[i], simbols[i],
GOAcc[[i]][[j]]$GOID,
GOAcc[[i]][[j]]$Ontology,
GOAcc[[i]][[j]]$Evidence) # or Evidence if preferred
res[actualrow,]<-unlist(reg)
actualrow<-actualrow+1}}}
rownames(res)=rep(NULL,dim(res)[1])
res<-as.data.frame(res)
names(res)<-c("Affy-ID","Entrez", "Gene Symbol", "GOID","Ontology","Evidence")
print(head(res))
oneTerm <- "GO:0006338"
oneParent<-get(oneTerm, GOBPPARENTS)   # the vector of its parent terms in the BP ontology.
oneParent
oneChildren<-get(oneTerm, GOBPCHILDREN) # the vector of its children terms in the BP ontolog
oneChildren
oneOffspring<-get(oneTerm, GOBPOFFSPRING) # the vector of its offspring terms in the BP ontology.
oneOffspring
oneChildren %in% oneOffspring
require(org.Hs.eg.db) # loads the library
myEIDs3 <-myEIDs[1:3] # Create vecotor of input Entrez IDs
myGO <- unlist(org.Hs.egGO[[as.character(myEIDs3[1])]])
myGO_All <- mget(myEIDs3, org.Hs.egGO)
GOgenes <- org.Hs.egGO2ALLEGS[[myGO[1]]]
GOgenes_All <- mget(myGO[1], org.Hs.egGO2ALLEGS)
require(org.Hs.eg.db) # loads the library
myEIDs3 <-myEIDs[1:3] # Create vecotor of input Entrez IDs
myEIDs
myEIDs3 <-entrezs[1:3] # Create vecotor of input Entrez IDs
myGO <- unlist(org.Hs.egGO[[as.character(myEIDs3[1])]])
myGO_All <- mget(myEIDs3, org.Hs.egGO)
GOgenes <- org.Hs.egGO2ALLEGS[[myGO[1]]]
GOgenes <- org.Hs.egGO2ALLEGS[[myGO[1]]]
GOgenes_All <- mget(myGO[1], org.Hs.egGO2ALLEGS)
GOgenes_All
GOgenes
require(hgu133a.db)
topTab <- topTabAvsB
entrezUniverse = unlist(mget(rownames(topTab), hgu133aENTREZID, ifnotfound=NA))
whichGenes<- topTab["adj.P.Val"]<0.05 & topTab["logFC"] > 1
sum(whichGenes)
topGenes <-   entrezUniverse[whichGenes]
allMyGenes <-topTab$adj.P.Val
names(allMyGenes)<-rownames(topTab)
require(topGO)
data(geneList) # adds function "topDiffGenes"
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
Myenrichment_Fisher <- runTest(myGOData, algorithm= "classic", statistic="fisher")
Myenrichment_Fisher
head(score(Myenrichment_Fisher), 25) # Displays p values for every GO term
geneData(Myenrichment_Fisher) # A table showing Medata data for enrichment
Myenrichment_KS <- runTest(myGOData, algorithm= "classic", statistic="ks")
enrich_table <-GenTable(myGOData, classicFisher=Myenrichment_Fisher,topNodes = 20)
head(enrich_table) # get the enrichment results as table
showSigOfNodes(myGOData, score(Myenrichment_Fisher), firstSigNodes=5, useInfo="all") # Plot the enrichment GO graph
gostat <- termStat(myGOData, names(score(Myenrichment_Fisher)))
plot(score(Myenrichment_Fisher), score(Myenrichment_KS)[names(score(Myenrichment_Fisher))], xlab="P values Fisher test", ylab="P values KS test", cex=(gostat$Annotated/max(gostat$Annotated))*4, col=heat.colors(gostat$Significant))
print(showGroupDensity(myGOData, enrich_table[1, "GO.ID"], ranks=TRUE))
head(enrich_table, n=25) # get the enrichment results as table
adjustedEnrichP <- p.adjust(enrichTable$classicFisher, method = "BH")
adjustedEnrichP <- p.adjust(enrich_table$classicFisher, method = "BH")
adjustedEnrichP
enrich_table$classicFisher
? p.adjust
adjustedEnrichP <- cbind(enrich_table, p.adjust(enrich_table$classicFisher, method = "BH"))
adjustedEnrichP
adjustedEnrichP <- cbind(enrich_table, adjP=p.adjust(enrich_table$classicFisher, method = "BH"))
head(enrich_table, n=25) # get the enrichment results as table
head(adjustedEnrichP, n=25) # get the enrichment results as table
topTab
whichGenes
sum(whichGenes)
topGenes <-   entrezUniverse[whichGenes]
allMyGenes <-topTab$adj.P.Val
names(allMyGenes)<-rownames(topTab)
topGenes
DEGenes<- topTab["adj.P.Val"]<0.05 & topTab["logFC"] > 1
sum(DEGenes)
head(topTab)
selectedTopTab <- topTab(selected)
selected<- topTab["adj.P.Val"]<0.05 & topTab["logFC"] > 1
sum(selected)
selectedTopTab <- topTab(selected)
selected<- topTab["adj.P.Val"]<0.05 & topTab["logFC"] > 1
sum(selected)
selectedProbes <- rownames(topTab)[selected]
selectedInfo <- cbind(selectedAnots, topTab[selected,])
selectedAnots <-  select(hgu133a.db, myProbes, c("SYMBOL", "ENTREZID", "GENENAME"))
selectedInfo <- cbind(selectedAnots, topTab[selected,])
topTab[selected,]
selected
dim(topTab)
dim(topTab[selected,])
selectedTopTab <- topTab[selected,]
selectedInfo <- cbind(selectedAnots, selectedTopTab)
dim(selectedAnots)
selectedAnots <-  select(hgu133a.db, selected, c("SYMBOL", "ENTREZID", "GENENAME"))
selectedTopTab <- topTab[selected,]
sum(selected)
selectedTopTab <- topTab[selected,]
selectedProbes <- rownames(selectedTopTab)
selectedAnots <-  select(hgu133a.db, selectedProbes, c("SYMBOL", "ENTREZID", "GENENAME"))
selectedInfo <- cbind(selectedAnots, selectedTopTab)
selectedInfo
dim(selectedInfo)
write.xlsx(selectedInfo, file="selectedTopTab_AvsB.xls")
require(xlsx)
write.csv2(selectedInfo, file="selectedTopTab_AvsB.xls", head=TRUE)
write.csv2(selectedInfo, file="selectedTopTab_AvsB.xls")
write.csv2(selectedInfo, file="selectedTopTab_AvsB.csv2")
View(selectedInfo)
selected<- topTab[,"adj.P.Val"]<0.05 & topTab[,"logFC"] > 1
sum(selected)
selected<- topTabAvsB[,"adj.P.Val"]<0.05 & topTab[,"logFC"] > 1
sum(selected)
selectedTopTab <- topTabAvsB[selected,]
selectedProbes <- rownames(selectedTopTab)
selectedAnots <-  select(hgu133a.db, selectedProbes, c("SYMBOL", "ENTREZID", "GENENAME"))
selectedInfo <- cbind(selectedAnots, selectedTopTab)
write.csv2(selectedInfo, file="selectedTopTab_AvsB.csv2")
expresAvsB <- read.table (file.path(inputDir, "expres_AvsB.csv2"), head=T, sep=";", dec=",", row.names=1)
colnames(expresAvsB)
yAB <- substr(colnames(expresAvsB),1,2)
yAB
yAB <- substr(colnames(expresAvsB),1,1)
yAB <- ifelse(yAB=="A",1,2)
yAB
yAB <- substr(colnames(expresAvsB),1,1)
yABnum <- ifelse(yAB=="A",1,2)
allEntrezs <- select(hgu133a.db, allProbes, "ENTREZID")
allProbes <- rownames(expresAvsB)
allEntrezs <- select(hgu133a.db, allProbes, "ENTREZID")
geneset.obj <-GSA.read.gmt("h.all.v5.2.entrez.gmt")
require(GSA)
xAB <- expresAvsB
yAB <- substr(colnames(expresAvsB),1,1)
yABnum <- ifelse(yAB=="A",1,2)
allProbes <- rownames(expresAvsB)
allEntrezs <- select(hgu133a.db, allProbes, "ENTREZID")
geneset.obj <-GSA.read.gmt("h.all.v5.2.entrez.gmt")
setwd("~/Dropbox (VHIR)/Charlas y presentaciones/2017-02-AnalisiFuncionalBRCA-UAB/RExamples")
geneset.obj <-GSA.read.gmt("h.all.v5.2.entrez.gmt")
GSA.obj<-GSA(xAB, yABnum, genenames=entrezs, genesets=geneset.obj,
resp.type="Two class unpaired", nperms=200)
allSymbols <- select(hgu133a.db, allProbes, "SYMBOL")
geneset.obj <-GSA.read.gmt("h.all.v5.2.entrez.gmt")
GSA.obj<-GSA(xAB, yABnum, genenames=entrezs, genesets=geneset.obj,
resp.type="Two class unpaired", nperms=200)
GSA.obj<-GSA(xAB, yABnum, genenames=allEntrezs, genesets=geneset.obj,
resp.type="Two class unpaired", nperms=200)
genesets
geneset.obj
allEntrezs
head(allEntrezs)
allEntrezs <- as.character(select(hgu133a.db, allProbes, "ENTREZID")[,2])
GSA.obj<-GSA(xAB, yABnum, genenames=allEntrezs, genesets=geneset.obj,
resp.type="Two class unpaired", nperms=200)
allEntrezs
allEntrezs <- as.integer(select(hgu133a.db, allProbes, "ENTREZID")[,2])
GSA.obj<-GSA(xAB, yABnum, genenames=allEntrezs, genesets=geneset.obj,
resp.type="Two class unpaired", nperms=200)
source("http://bioconductor.org/biocLite.R")
if (!(require(annotate))) biocLite("annotate")
if (!(require(GOstats))) biocLite("GOstats")
